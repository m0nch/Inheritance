1.	is-a տիպի հարաբերություն (է, հանդիսանում է): 
Այս դեպքում մի դասը մեկ այլ դասի ենթատեսակ է։ Այլ կերպ ասած, մի դասը ընդլայնում է մեկ այլ դասի հնարավորությունները: 
Այս տեսակը հիմնված է ժառանգման մեխանիզմի կիրառման վրա:
is-a հարաբերությունն անհրաժեշտ է, երբ անհրաժեշտ է փոփոխել (ընդլայնել) արդեն գոյություն ունեցող ծրագրի կոդը (դասը):
Օրինակ՝ Point դասը նկարագրում է կետը կոորդինատային հարթության վրա: Հաջորդ քայլում անհրաժեշտ է դառնում ընդլայնել Point դասը 
նոր գունային տարրով, որը սահմանում է կոորդինատային հարթության վրա գտնվող կետի գույնը։ Point դասի կոդը (երբեմն դա անհնար է) 
չփոփոխելու համար բավական է ներդնել նոր ColorPoint դաս, որը ժառանգում է (ընդլայնում) Point դասը և գույն է հաղորդում դրան։


2.	has-a տիպի հարաբերություն (պարունակում է): 
Այս դեպքում մի դասը պարունակում է մեկ այլ դաս: Հարաբերություն, որտեղ կա կապ երկու դասերի միջև: 
Այս դեպքում դասում հայտարարվում է մյուս դասի մեկ կամ մի քանի օբյեկտ: 
Եթե այդ օբյեկտները դասի մաս չեն կազմում, այսինքն՝ դասը կարող է գոյություն ունենալ առանց այդ օբյեկտների, ապա սա ագրեգացիա է, 
Օրինակ՝ Ավտոպարկ դասը կարող է պարունակել Ավտոմեքենա, Մոտոցիկլ, Ավտոբուս դասերի օրինակների զանգվածներ (ցուցակներ): 
Եթե ցանկացած պահի Ավտոպարկում մեքենաներ չլինեն, ապա կայանատեղին կշարունակի գործել.
իսկ եթե այդ օբյեկտները (օբյեկտը) դասի մաս են կազմում, այսինքն՝ առանց այդ օբյեկտների, դասի բուն տրամաբանական գոյությունն անհնար է, ապա դա կոմպոզիցիա է:
Օրինակ՝ Ավտոմեքենաների դասը պետք է պարունակի Շարժիչ դասի մեկ օրինակ և Անիվների դասի չորս օրինակ: Շարժիչի և Անիվի դասերի օրինակները 
Ավտոմեքենայի անբաժանելի մասն են: Եթե հեռացնեք այս օրինակներից մեկը, ապա Ավտոմեքենան չի գործի և արդյունքում չի աշխատի Ավտոմեքենաների դասը.
